
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AE AG AMPERSAND AND AND_OP ARG_LIST ARROW ASSIGNMENT BOUNDS BUILTIN_FUNCTION1 BUILTIN_FUNCTION2 BUILTIN_FUNCTION3 CARET COLON COMMA DEADLOCK DECIMAL_NUMBER DIVIDE DOT DYNAMIC_EXPRESSION EE EG EQ FALSE GE GT ID IDENTIFIER IMPLIES INF LBRACE LBRACKET LE LOCATION LPAREN LSHIFT LT MINUS MINUSMINUS MINUS_2147483648 MITL_EXPRESSION MOD NE NON_TYPE_ID NOT OR OR_OP PIPE PLUS PLUSPLUS POS_INTEGER POW QUESTION QUOTED_TEXT RBRACE RBRACKET RPAREN RSHIFT STRING_LITERAL SUP TIMES TRUE TYPE UNDER UNION XOR XOR_OP\n    SymbolicQuery : AE expression\n    | AG expression\n    | EG expression\n    | EE expression\n    | expression ARROW expression\n    List : expression\n    | expression COMMA List\n    \n    expression : bin_op_lv8\n\n    bin_op_lv8 : bin_op_lv7\n    | bin_op_lv7 IMPLIES bin_op_lv8\n    bin_op_lv7 : bin_op_lv6\n    | bin_op_lv6 UNION bin_op_lv7\n    bin_op_lv6 : bin_op_lv5\n    | bin_op_lv5 XOR bin_op_lv6\n    | bin_op_lv5 AND bin_op_lv6\n    | bin_op_lv5 OR bin_op_lv6\n    bin_op_lv5 : bin_op_lv4\n    | bin_op_lv4 GT bin_op_lv5\n    | bin_op_lv4 LE bin_op_lv5\n    | bin_op_lv4 GE bin_op_lv5\n    | bin_op_lv4 EQ bin_op_lv5\n    | bin_op_lv4 NE bin_op_lv5\n    | bin_op_lv4 LT bin_op_lv5\n    \n    bin_op_lv4 : bin_op_lv3 PLUS bin_op_lv4\n        | bin_op_lv3 MINUS bin_op_lv4\n        | bin_op_lv3 LSHIFT bin_op_lv4\n        | bin_op_lv3 RSHIFT bin_op_lv4\n        | bin_op_lv3\n    \n    bin_op_lv3 : sub_expression TIMES bin_op_lv3\n        | sub_expression DIVIDE bin_op_lv3\n        | sub_expression MOD bin_op_lv3\n        | sub_expression\n    \n    sub_expression :  LPAREN expression RPAREN\n        | NOT expression\n        | primary\n    \n    primary : IDENTIFIER\n        | POS_INTEGER\n    '
    
_lr_action_items = {'AE':([0,],[2,]),'AG':([0,],[4,]),'EG':([0,],[5,]),'EE':([0,],[6,]),'LPAREN':([0,2,4,5,6,14,15,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'NOT':([0,2,4,5,6,14,15,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'IDENTIFIER':([0,2,4,5,6,14,15,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'POS_INTEGER':([0,2,4,5,6,14,15,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'$end':([1,7,8,9,10,11,12,13,16,17,18,19,21,22,23,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[0,-8,-9,-11,-13,-17,-28,-32,-35,-36,-37,-1,-2,-3,-4,-34,-5,-10,-12,-14,-15,-16,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,-31,-33,]),'ARROW':([3,7,8,9,10,11,12,13,16,17,18,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[20,-8,-9,-11,-13,-17,-28,-32,-35,-36,-37,-34,-10,-12,-14,-15,-16,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,-31,-33,]),'RPAREN':([7,8,9,10,11,12,13,16,17,18,42,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[-8,-9,-11,-13,-17,-28,-32,-35,-36,-37,63,-34,-10,-12,-14,-15,-16,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,-31,-33,]),'TIMES':([7,8,9,10,11,12,13,16,17,18,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[-8,-9,-11,-13,-17,-28,39,-35,-36,-37,-34,-10,-12,-14,-15,-16,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,-31,-33,]),'DIVIDE':([7,8,9,10,11,12,13,16,17,18,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[-8,-9,-11,-13,-17,-28,40,-35,-36,-37,-34,-10,-12,-14,-15,-16,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,-31,-33,]),'MOD':([7,8,9,10,11,12,13,16,17,18,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[-8,-9,-11,-13,-17,-28,41,-35,-36,-37,-34,-10,-12,-14,-15,-16,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,-31,-33,]),'PLUS':([7,8,9,10,11,12,13,16,17,18,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[-8,-9,-11,-13,-17,35,-32,-35,-36,-37,-34,-10,-12,-14,-15,-16,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,-31,-33,]),'MINUS':([7,8,9,10,11,12,13,16,17,18,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[-8,-9,-11,-13,-17,36,-32,-35,-36,-37,-34,-10,-12,-14,-15,-16,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,-31,-33,]),'LSHIFT':([7,8,9,10,11,12,13,16,17,18,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[-8,-9,-11,-13,-17,37,-32,-35,-36,-37,-34,-10,-12,-14,-15,-16,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,-31,-33,]),'RSHIFT':([7,8,9,10,11,12,13,16,17,18,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[-8,-9,-11,-13,-17,38,-32,-35,-36,-37,-34,-10,-12,-14,-15,-16,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,-31,-33,]),'GT':([7,8,9,10,11,12,13,16,17,18,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[-8,-9,-11,-13,29,-28,-32,-35,-36,-37,-34,-10,-12,-14,-15,-16,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,-31,-33,]),'LE':([7,8,9,10,11,12,13,16,17,18,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[-8,-9,-11,-13,30,-28,-32,-35,-36,-37,-34,-10,-12,-14,-15,-16,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,-31,-33,]),'GE':([7,8,9,10,11,12,13,16,17,18,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[-8,-9,-11,-13,31,-28,-32,-35,-36,-37,-34,-10,-12,-14,-15,-16,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,-31,-33,]),'EQ':([7,8,9,10,11,12,13,16,17,18,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[-8,-9,-11,-13,32,-28,-32,-35,-36,-37,-34,-10,-12,-14,-15,-16,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,-31,-33,]),'NE':([7,8,9,10,11,12,13,16,17,18,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[-8,-9,-11,-13,33,-28,-32,-35,-36,-37,-34,-10,-12,-14,-15,-16,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,-31,-33,]),'LT':([7,8,9,10,11,12,13,16,17,18,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[-8,-9,-11,-13,34,-28,-32,-35,-36,-37,-34,-10,-12,-14,-15,-16,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,-31,-33,]),'XOR':([7,8,9,10,11,12,13,16,17,18,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[-8,-9,-11,26,-17,-28,-32,-35,-36,-37,-34,-10,-12,-14,-15,-16,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,-31,-33,]),'AND':([7,8,9,10,11,12,13,16,17,18,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[-8,-9,-11,27,-17,-28,-32,-35,-36,-37,-34,-10,-12,-14,-15,-16,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,-31,-33,]),'OR':([7,8,9,10,11,12,13,16,17,18,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[-8,-9,-11,28,-17,-28,-32,-35,-36,-37,-34,-10,-12,-14,-15,-16,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,-31,-33,]),'UNION':([7,8,9,10,11,12,13,16,17,18,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[-8,-9,25,-13,-17,-28,-32,-35,-36,-37,-34,-10,-12,-14,-15,-16,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,-31,-33,]),'IMPLIES':([7,8,9,10,11,12,13,16,17,18,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[-8,24,-11,-13,-17,-28,-32,-35,-36,-37,-34,-10,-12,-14,-15,-16,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,-31,-33,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'SymbolicQuery':([0,],[1,]),'expression':([0,2,4,5,6,14,15,20,],[3,19,21,22,23,42,43,44,]),'bin_op_lv8':([0,2,4,5,6,14,15,20,24,],[7,7,7,7,7,7,7,7,45,]),'bin_op_lv7':([0,2,4,5,6,14,15,20,24,25,],[8,8,8,8,8,8,8,8,8,46,]),'bin_op_lv6':([0,2,4,5,6,14,15,20,24,25,26,27,28,],[9,9,9,9,9,9,9,9,9,9,47,48,49,]),'bin_op_lv5':([0,2,4,5,6,14,15,20,24,25,26,27,28,29,30,31,32,33,34,],[10,10,10,10,10,10,10,10,10,10,10,10,10,50,51,52,53,54,55,]),'bin_op_lv4':([0,2,4,5,6,14,15,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,56,57,58,59,]),'bin_op_lv3':([0,2,4,5,6,14,15,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,60,61,62,]),'sub_expression':([0,2,4,5,6,14,15,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'primary':([0,2,4,5,6,14,15,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> SymbolicQuery","S'",1,None,None,None),
  ('SymbolicQuery -> AE expression','SymbolicQuery',2,'p_symbolic_query','parser.py',10),
  ('SymbolicQuery -> AG expression','SymbolicQuery',2,'p_symbolic_query','parser.py',11),
  ('SymbolicQuery -> EG expression','SymbolicQuery',2,'p_symbolic_query','parser.py',12),
  ('SymbolicQuery -> EE expression','SymbolicQuery',2,'p_symbolic_query','parser.py',13),
  ('SymbolicQuery -> expression ARROW expression','SymbolicQuery',3,'p_symbolic_query','parser.py',14),
  ('List -> expression','List',1,'p_List','parser.py',36),
  ('List -> expression COMMA List','List',3,'p_List','parser.py',37),
  ('expression -> bin_op_lv8','expression',1,'p_EXPRESSION','parser.py',48),
  ('bin_op_lv8 -> bin_op_lv7','bin_op_lv8',1,'p_binop_level_8','parser.py',66),
  ('bin_op_lv8 -> bin_op_lv7 IMPLIES bin_op_lv8','bin_op_lv8',3,'p_binop_level_8','parser.py',67),
  ('bin_op_lv7 -> bin_op_lv6','bin_op_lv7',1,'p_binop_level_7','parser.py',79),
  ('bin_op_lv7 -> bin_op_lv6 UNION bin_op_lv7','bin_op_lv7',3,'p_binop_level_7','parser.py',80),
  ('bin_op_lv6 -> bin_op_lv5','bin_op_lv6',1,'p_binop_level_6','parser.py',93),
  ('bin_op_lv6 -> bin_op_lv5 XOR bin_op_lv6','bin_op_lv6',3,'p_binop_level_6','parser.py',94),
  ('bin_op_lv6 -> bin_op_lv5 AND bin_op_lv6','bin_op_lv6',3,'p_binop_level_6','parser.py',95),
  ('bin_op_lv6 -> bin_op_lv5 OR bin_op_lv6','bin_op_lv6',3,'p_binop_level_6','parser.py',96),
  ('bin_op_lv5 -> bin_op_lv4','bin_op_lv5',1,'p_binop_level_5','parser.py',109),
  ('bin_op_lv5 -> bin_op_lv4 GT bin_op_lv5','bin_op_lv5',3,'p_binop_level_5','parser.py',110),
  ('bin_op_lv5 -> bin_op_lv4 LE bin_op_lv5','bin_op_lv5',3,'p_binop_level_5','parser.py',111),
  ('bin_op_lv5 -> bin_op_lv4 GE bin_op_lv5','bin_op_lv5',3,'p_binop_level_5','parser.py',112),
  ('bin_op_lv5 -> bin_op_lv4 EQ bin_op_lv5','bin_op_lv5',3,'p_binop_level_5','parser.py',113),
  ('bin_op_lv5 -> bin_op_lv4 NE bin_op_lv5','bin_op_lv5',3,'p_binop_level_5','parser.py',114),
  ('bin_op_lv5 -> bin_op_lv4 LT bin_op_lv5','bin_op_lv5',3,'p_binop_level_5','parser.py',115),
  ('bin_op_lv4 -> bin_op_lv3 PLUS bin_op_lv4','bin_op_lv4',3,'p_binop_level_4','parser.py',129),
  ('bin_op_lv4 -> bin_op_lv3 MINUS bin_op_lv4','bin_op_lv4',3,'p_binop_level_4','parser.py',130),
  ('bin_op_lv4 -> bin_op_lv3 LSHIFT bin_op_lv4','bin_op_lv4',3,'p_binop_level_4','parser.py',131),
  ('bin_op_lv4 -> bin_op_lv3 RSHIFT bin_op_lv4','bin_op_lv4',3,'p_binop_level_4','parser.py',132),
  ('bin_op_lv4 -> bin_op_lv3','bin_op_lv4',1,'p_binop_level_4','parser.py',133),
  ('bin_op_lv3 -> sub_expression TIMES bin_op_lv3','bin_op_lv3',3,'p_binop_level_3','parser.py',148),
  ('bin_op_lv3 -> sub_expression DIVIDE bin_op_lv3','bin_op_lv3',3,'p_binop_level_3','parser.py',149),
  ('bin_op_lv3 -> sub_expression MOD bin_op_lv3','bin_op_lv3',3,'p_binop_level_3','parser.py',150),
  ('bin_op_lv3 -> sub_expression','bin_op_lv3',1,'p_binop_level_3','parser.py',151),
  ('sub_expression -> LPAREN expression RPAREN','sub_expression',3,'p_SUB_expression','parser.py',164),
  ('sub_expression -> NOT expression','sub_expression',2,'p_SUB_expression','parser.py',165),
  ('sub_expression -> primary','sub_expression',1,'p_SUB_expression','parser.py',166),
  ('primary -> IDENTIFIER','primary',1,'p_simple_expression','parser.py',181),
  ('primary -> POS_INTEGER','primary',1,'p_simple_expression','parser.py',182),
]
